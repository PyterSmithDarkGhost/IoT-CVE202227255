#include <stdint.h>

// ecos-3.0/packages/net/tcpip/v3_0/include/netinet/in.h
/*
 * Options for use with [gs]etsockopt at the IP level.
 * First word of comment is data type; bool is stored in int.
 */
#define	IP_OPTIONS		1    /* buf/ip_opts; set/get IP options */
#define	IP_HDRINCL		2    /* int; header is included with data */
#define	IP_TOS			3    /* int; IP type of service and preced. */
#define	IP_TTL			4    /* int; IP time to live */
#define	IP_RECVOPTS		5    /* bool; receive all IP opts w/dgram */
#define	IP_RECVRETOPTS		6    /* bool; receive IP opts for response */
#define	IP_RECVDSTADDR		7    /* bool; receive IP dst addr w/dgram */
#define	IP_RETOPTS		8    /* ip_opts; set/get IP options */
#define	IP_MULTICAST_IF		9    /* in_addr; set/get IP multicast i/f  */
#define	IP_MULTICAST_TTL	10   /* u_char; set/get IP multicast ttl */
#define	IP_MULTICAST_LOOP	11   /* u_char; set/get IP multicast loopback */
#define	IP_ADD_MEMBERSHIP	12   /* ip_mreq; add an IP group membership */
#define	IP_DROP_MEMBERSHIP	13   /* ip_mreq; drop an IP group membership */

/* 14-17 left empty for future compatibility with FreeBSD */

#define IP_PORTRANGE		19   /* int; range to choose for unspec port */
#define IP_AUTH_LEVEL		20   /* u_char; authentication used */
#define IP_ESP_TRANS_LEVEL	21   /* u_char; transport encryption */
#define IP_ESP_NETWORK_LEVEL	22   /* u_char; full-packet encryption */

// ecos-3.0/packages/net/lwip_tcpip/v3_0/include/lwip/sockets.h
#define AF_UNSPEC       0
#define AF_INET         2
#define PF_INET         AF_INET
#define PF_UNSPEC       AF_UNSPEC
#define SOCK_STREAM     1
#define SOCK_DGRAM      2
#define SOCK_RAW        3
#define IPPROTO_IP      0
#define IPPROTO_TCP     6
#define IPPROTO_UDP     17

// ecos-3.0/packages/net/tcpip/v3_0/include/netinet/in.h
struct in_addr {
    uint32_t s_addr;     /* address in network byte order */
};

struct sockaddr {
  uint8_t sa_len;
  uint8_t sa_family;
  char sa_data[14];
};

struct sockaddr_in {
  uint8_t sin_len;
  uint8_t sin_family;
  uint16_t sin_port;
  struct in_addr sin_addr;
  uint8_t sin_zero[24];
};

typedef struct sockaddr sockaddr;
typedef struct sockaddr_in sockaddr_in;

// ecos-3.0/packages/net/tcpip/v3_0/include/netinet/tcp.h
typedef uint32_t u_int32_t;
typedef uint16_t u_int16_t;
typedef uint8_t u_int8_t;
typedef u_int32_t tcp_seq;

struct tcphdr {
	u_int16_t th_sport;		/* source port */
	u_int16_t th_dport;		/* destination port */
	tcp_seq	  th_seq;		/* sequence number */
	tcp_seq	  th_ack;		/* acknowledgement number */
	u_int8_t  th_off:4,		/* data offset */
		  th_x2:4;		/* (unused) */
	u_int8_t  th_flags;
#define	TH_FIN	  0x01
#define	TH_SYN	  0x02
#define	TH_RST	  0x04
#define	TH_PUSH	  0x08
#define	TH_ACK	  0x10
#define	TH_URG	  0x20
	u_int16_t th_win;			/* window */
	u_int16_t th_sum;			/* checksum */
	u_int16_t th_urp;			/* urgent pointer */
} __attribute__ ((aligned(1), packed));

// ecos-3.0/packages/net/tcpip/v3_0/include/netinet/ip.h
struct ip {
	u_int8_t  ip_v:4,		/* version */
		  ip_hl:4;		/* header length */
	u_int8_t  ip_tos;		/* type of service */
	u_int16_t ip_len;		/* total length */
	u_int16_t ip_id;		/* identification */
	u_int16_t ip_off;		/* fragment offset field */
#define	IP_RF 0x8000			/* reserved fragment flag */
#define	IP_DF 0x4000			/* dont fragment flag */
#define	IP_MF 0x2000			/* more fragments flag */
#define	IP_OFFMASK 0x1fff		/* mask for fragmenting bits */
	u_int8_t  ip_ttl;		/* time to live */
	u_int8_t  ip_p;			/* protocol */
	u_int16_t ip_sum;		/* checksum */
	struct	  in_addr ip_src, ip_dst; /* source and dest address */
} __attribute__ ((aligned(1), packed));


typedef struct timeval {
	int seconds;
	int useconds;
} timeval;

typedef struct str_client {
	struct client *next;
	unsigned char unknown;
	unsigned char mac[6];
	unsigned char padding2;
	unsigned char ip[4];
	char name[32];
} client;

typedef struct {
	unsigned short start;
	unsigned short end;
	uint8_t *ports_state;
	uint32_t ip;
} port_scan_task;

typedef struct {
	unsigned int idx;
	void *stack;
	void *data;
	unsigned int handle;
	port_scan_task task;
} thread_info;

#define THREAD_COUNT 8